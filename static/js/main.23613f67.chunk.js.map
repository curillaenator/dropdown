{"version":3,"sources":["utils/colors.ts","app/components/SimpleHeader.tsx","app/components/Dropdown.tsx","app/App.tsx","index.tsx"],"names":["colors","HeaderStyled","styled","header","SimpleHeader","title","className","DropdownTitle","div","disabled","open","DropdownList","maxWidth","DropdownListItem","button","look","checked","DropdownStyled","SET_OPEN","SET_LIST","initialState","list","reducer","state","action","type","payload","setOpen","setList","icons","arrow","width","height","viewBox","xmlns","d","check","Dropdown","data","doSomeAjaxOnChange","ref","useRef","useReducer","dispatch","useEffect","handleClose","e","current","contains","target","document","addEventListener","removeEventListener","groups","Set","map","item","group","onClick","i","index","updItem","updList","splice","handleCheck","id","AppContainer","fakeData","fakeDataLong","fakeDataShort","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.23613f67.chunk.js","sourcesContent":["export const colors = {\n  fontBlack: \"#000000\",\n  fontDark: \"#212122\",\n  fontWhite: \"#ffffff\",\n  fontGray: \"#757575\",\n  fontDanger: \"#CD4E4E\",\n  fontDisabled: \"#21212254\",\n\n  backWhite: \"#ffffff\",\n  backBlue: \"#057DFF\",\n  backBlueDark: \"#1A53BC\",\n  backGray: \"#DADEE7\",\n  backDanger: \"#E64E4E\",\n  backDangerDark: \"#AF4E4E\",\n  backDisabled: \"#F1F2F6\",\n  backChecked: \"#F0F4FF\",\n};\n","import { FC } from \"react\";\nimport styled from \"styled-components\";\n\nimport { colors } from \"../../utils/colors\";\n\nconst HeaderStyled = styled.header`\n  display: flex;\n  align-items: center;\n  margin-bottom: 99px;\n\n  .title {\n    font-style: normal;\n    font-weight: 600;\n    font-size: 152px;\n    line-height: 140px;\n    letter-spacing: 0.25px;\n    color: ${colors.fontBlack};\n    user-select: none;\n  }\n`;\n\ninterface ISimpleHeader {\n  title: string;\n}\n\nexport const SimpleHeader: FC<ISimpleHeader> = ({ title }) => {\n  return (\n    <HeaderStyled>\n      <h1 className=\"title\">{title}</h1>\n    </HeaderStyled>\n  );\n};\n","import { useEffect } from \"react\";\nimport { FC, useRef, useReducer, Reducer } from \"react\";\nimport styled from \"styled-components\";\n\nimport { colors } from \"../../utils/colors\";\n\nimport type { IItem } from \"../App\";\n\n// TYPES\n// styles\ninterface IDropdownTitle {\n  open: boolean;\n  disabled: boolean;\n}\n\ninterface IDropdownList {\n  maxWidth: string | undefined;\n}\n\ninterface IDropdownListItem {\n  checked: boolean;\n  look: string;\n}\n\n// state\ninterface Action {\n  type: string;\n  payload: any;\n}\n\ninterface TState {\n  list: IItem[];\n  open: boolean;\n}\n\ntype TAction<T> = (payload: T) => { type: string; payload: T };\n\n// components\ninterface IDropdown {\n  data: IItem[];\n  title: string;\n  maxWidth?: string;\n  disabled?: boolean;\n  doSomeAjaxOnChange: (updList: IItem[]) => void;\n}\n\n// CSS STYLES\n\nconst DropdownTitle = styled.div<IDropdownTitle>`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: fit-content;\n  min-width: 294px;\n  height: 40px;\n  padding: 0 20px;\n  border-radius: 20px;\n  transition: 0.08s linear;\n  cursor: ${({ disabled }) => (disabled ? \"default\" : \"pointer\")};\n  background-color: ${({ open, disabled }) => {\n    switch (true) {\n      case disabled:\n        return colors.backDisabled;\n      case open:\n        return colors.backBlueDark;\n      default:\n        return colors.backWhite;\n    }\n  }};\n\n  & > span {\n    font-style: normal;\n    font-weight: 400;\n    font-size: 15px;\n    line-height: 18px;\n    user-select: none;\n    color: ${({ open, disabled }) => {\n      switch (true) {\n        case disabled:\n          return colors.fontDisabled;\n        case open:\n          return colors.fontWhite;\n        default:\n          return colors.fontDark;\n      }\n    }};\n  }\n\n  & > svg {\n    margin-left: 16px;\n    transition: 0.08s linear;\n    transform: rotate(${({ open }) => (open ? \"180deg\" : \"0\")});\n    fill: ${({ open, disabled }) => {\n      switch (true) {\n        case disabled:\n          return colors.fontDisabled;\n        case open:\n          return colors.fontWhite;\n        default:\n          return colors.fontDark;\n      }\n    }};\n  }\n\n  &:hover {\n    background-color: ${({ disabled }) =>\n      disabled ? colors.backDisabled : colors.backBlue};\n\n    & > span {\n      color: ${({ disabled }) =>\n        disabled ? colors.fontDisabled : colors.fontWhite};\n    }\n\n    & > svg {\n      fill: ${({ disabled }) =>\n        disabled ? colors.fontDisabled : colors.fontWhite};\n    }\n  }\n\n  &:active {\n    background-color: ${({ disabled }) =>\n      disabled ? colors.backDisabled : colors.backBlueDark};\n\n    & > span {\n      color: ${({ disabled }) =>\n        disabled ? colors.fontDisabled : colors.fontWhite};\n    }\n\n    & > svg {\n      fill: ${({ disabled }) =>\n        disabled ? colors.fontDisabled : colors.fontWhite};\n    }\n  }\n`;\n\nconst DropdownList = styled.div<IDropdownList>`\n  position: absolute;\n  top: calc(40px + 16px);\n  right: 50%;\n  width: ${({ maxWidth }) => (maxWidth ? maxWidth : \"fit-content\")};\n  border-radius: 8px;\n  background-color: ${colors.backWhite};\n  transform: translateX(50%);\n  overflow: hidden;\n  box-shadow: 0px 19px 38px rgba(33, 38, 44, 0.15),\n    0px 15px 12px rgba(33, 38, 44, 0.11);\n  z-index: 10;\n\n  .listgroup {\n    &_title {\n      display: flex;\n      align-items: center;\n      position: relative;\n      width: 100%;\n      min-height: 36px;\n      padding: 12px 16px;\n      font-style: normal;\n      font-weight: normal;\n      font-size: 13px;\n      line-height: 16px;\n      letter-spacing: 0.2px;\n      color: ${colors.fontGray};\n      user-select: none;\n\n      &::after {\n        position: absolute;\n        content: \"\";\n        width: calc(100% - 16px);\n        height: 1px;\n        right: 0;\n        bottom: 0;\n        background-color: ${colors.backGray};\n      }\n    }\n  }\n`;\n\nconst DropdownListItem = styled.button<IDropdownListItem>`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  min-height: 36px;\n  padding: 9px 16px;\n  transition: 0.08s linear;\n  cursor: ${({ look }) => (look === \"disabled\" ? \"default\" : \"pointer\")};\n  background-color: ${({ look, checked }) => {\n    switch (true) {\n      case look === \"disabled\":\n        return colors.backDisabled;\n\n      case checked:\n        return colors.backChecked;\n\n      default:\n        return \"tranparent\";\n    }\n  }};\n\n  & > span {\n    width: calc(100% - 24px);\n    text-align: start;\n    font-style: normal;\n    font-weight: normal;\n    font-size: 15px;\n    line-height: 18px;\n    color: ${({ look }) => {\n      switch (look) {\n        case \"danger\":\n          return colors.fontDanger;\n\n        case \"disabled\":\n          return colors.fontGray;\n\n        default:\n          return colors.fontDark;\n      }\n    }};\n  }\n\n  & > svg {\n    flex-shrink: 0;\n    margin: 0 3px 0 7px;\n    opacity: ${({ checked }) => (checked ? \"1\" : \"0\")};\n    transition: 0.08s linear;\n    fill: ${({ look }) => {\n      switch (look) {\n        case \"danger\":\n          return colors.fontDanger;\n\n        case \"disabled\":\n          return colors.fontGray;\n\n        default:\n          return colors.fontDark;\n      }\n    }};\n  }\n\n  &:hover {\n    background-color: ${({ look }) => {\n      switch (look) {\n        case \"danger\":\n          return colors.backDanger;\n\n        case \"disabled\":\n          return colors.backDisabled;\n\n        default:\n          return colors.backBlue;\n      }\n    }};\n\n    & > span {\n      color: ${({ look }) => {\n        switch (look) {\n          case \"disabled\":\n            return colors.fontGray;\n\n          default:\n            return colors.fontWhite;\n        }\n      }};\n    }\n\n    & > svg {\n      fill: ${({ look }) => {\n        switch (look) {\n          case \"disabled\":\n            return colors.fontGray;\n\n          default:\n            return colors.fontWhite;\n        }\n      }};\n    }\n  }\n\n  &:active {\n    background-color: ${({ look }) => {\n      switch (look) {\n        case \"danger\":\n          return colors.backDangerDark;\n\n        case \"disabled\":\n          return colors.backDisabled;\n\n        default:\n          return colors.backBlueDark;\n      }\n    }};\n  }\n`;\n\nconst DropdownStyled = styled.div`\n  position: relative;\n`;\n\n// STATE MANAGEMENT\n\nconst SET_OPEN = \"dropdown/SET_OPEN\";\nconst SET_LIST = \"dropdown/SET_LIST\";\n\nconst initialState: TState = { list: [], open: false };\n\nconst reducer: Reducer<TState, Action> = (state, action) => {\n  switch (action.type) {\n    case SET_LIST:\n      return { ...state, list: action.payload };\n\n    case SET_OPEN:\n      return { ...state, open: action.payload };\n\n    default:\n      return state;\n  }\n};\n\nconst setOpen: TAction<boolean> = (payload) => ({ type: SET_OPEN, payload });\nconst setList: TAction<IItem[]> = (payload) => ({ type: SET_LIST, payload });\n\n// UTILS\n\nconst icons = {\n  arrow: (\n    <svg\n      width=\"8\"\n      height=\"6\"\n      viewBox=\"0 0 8 6\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path d=\"M0.706206 2.41374L3.29621 5.00374C3.68621 5.39374 4.31621 5.39374 4.70621 5.00374L7.29621 2.41374C7.92621 1.78374 7.47621 0.703735 6.58621 0.703735H1.40621C0.516206 0.703735 0.0762062 1.78374 0.706206 2.41374Z\" />\n    </svg>\n  ),\n  check: (\n    <svg\n      width=\"14\"\n      height=\"12\"\n      viewBox=\"0 0 14 12\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path d=\"M4.32915 9.22918L1.43749 6.33751C1.28179 6.18146 1.07042 6.09377 0.849988 6.09377C0.629556 6.09377 0.418181 6.18146 0.262488 6.33751C-0.0625122 6.66251 -0.0625122 7.18751 0.262488 7.51251L3.74582 10.9958C4.07082 11.3208 4.59582 11.3208 4.92082 10.9958L13.7375 2.17917C14.0625 1.85417 14.0625 1.32917 13.7375 1.00418C13.5818 0.848131 13.3704 0.760437 13.15 0.760437C12.9296 0.760437 12.7182 0.848131 12.5625 1.00418L4.32915 9.22918Z\" />\n    </svg>\n  ),\n};\n\n// JSX COMPONENT\n\nexport const Dropdown: FC<IDropdown> = ({\n  data,\n  title,\n  maxWidth,\n  disabled = false,\n  doSomeAjaxOnChange,\n}) => {\n  const ref = useRef(null);\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n  // Для state для простоты кода можно/нужно было реализовать простой useState вместо useReducer:\n  // const [list, setList] = useState([]),\n  // const [open, setOpen] = useState(false),\n  // useReducer был использован для демонстрации работы с Redux-подобным state-менеджментом и его типизацией:\n\n  useEffect(() => dispatch(setList(data)), [data]);\n\n  // console.log(data);\n\n  useEffect(() => {\n    const handleClose = (e: any) => {\n      // @ts-ignore\n      if (ref.current && !ref.current!.contains(e.target)) {\n        dispatch(setOpen(false));\n      }\n    };\n\n    document.addEventListener(\"click\", handleClose);\n    return () => document.removeEventListener(\"click\", handleClose);\n  }, []);\n\n  const { list, open } = state;\n\n  const groups = [...new Set(list.map((item) => item.group))];\n\n  // handlers\n\n  const handleOpen = (): void => {\n    if (disabled) return;\n    dispatch(setOpen(!open));\n  };\n\n  const handleCheck = (item: IItem, index: number): void => {\n    if (item.type === \"disabled\") return;\n\n    const updItem = { ...item, checked: !item.checked };\n    const updList = [...list];\n    updList?.splice(index, 1, updItem);\n\n    doSomeAjaxOnChange(updList); // This should be Promise, then\n    dispatch(setList(updList));\n  };\n\n  return (\n    <DropdownStyled ref={ref}>\n      <DropdownTitle open={open} disabled={disabled} onClick={handleOpen}>\n        <span>{title}</span>\n        {icons.arrow}\n      </DropdownTitle>\n\n      {open && (\n        <DropdownList maxWidth={maxWidth}>\n          {groups.map((group) => (\n            <div className=\"listgroup\" key={group}>\n              <h3 className=\"listgroup_title\">{group}</h3>\n\n              {list.map((item, i) => {\n                if (item.group === group) {\n                  return (\n                    <DropdownListItem\n                      look={item.type}\n                      checked={item.checked}\n                      key={item.id}\n                      onClick={() => handleCheck(item, i)}\n                    >\n                      <span>{item.title}</span>\n                      {icons.check}\n                    </DropdownListItem>\n                  );\n                }\n\n                return null;\n              })}\n            </div>\n          ))}\n        </DropdownList>\n      )}\n    </DropdownStyled>\n  );\n};\n","import { FC } from \"react\";\nimport styled from \"styled-components\";\n\nimport { SimpleHeader } from \"./components/SimpleHeader\";\nimport { Dropdown } from \"./components/Dropdown\";\n\nconst AppContainer = styled.div`\n  width: 100%;\n  max-width: 1280px;\n  min-width: 1110px;\n  margin: 0 auto;\n  padding: 80px 92px;\n\n  .dropdowns {\n    display: flex;\n    justify-content: space-between;\n    margin-bottom: 32px;\n  }\n`;\n\nexport interface IItem {\n  id: string;\n  group: string;\n  title: string;\n  type: string;\n  checked: boolean;\n}\n\nconst fakeData = [\n  {\n    id: \"item1\",\n    group: \"Группа в списке 1\",\n    title: \"Обычный пункт\",\n    type: \"normal\",\n    checked: false,\n  },\n  {\n    id: \"item2\",\n    group: \"Группа в списке 1\",\n    title: \"Обычный пункт\",\n    type: \"normal\",\n    checked: true,\n  },\n  {\n    id: \"item3\",\n    group: \"Группа в списке 1\",\n    title: \"Пункт disabled\",\n    type: \"disabled\",\n    checked: false,\n  },\n  {\n    id: \"item4\",\n    group: \"Группа в списке 2\",\n    title: \"Danger пункт\",\n    type: \"danger\",\n    checked: false,\n  },\n  {\n    id: \"item5\",\n    group: \"Группа в списке 2\",\n    title: \"Danger пункт\",\n    type: \"danger\",\n    checked: true,\n  },\n  {\n    id: \"item6\",\n    group: \"Группа в списке 2\",\n    title: \"Пункт disabled checked\",\n    type: \"disabled\",\n    checked: true,\n  },\n];\n\nconst fakeDataLong = [\n  {\n    id: \"item1\",\n    group: \"Длинное название для группы, которое занимает несколько строк\",\n    title: \"Длинное название пункта, которое занимает сразу несколько строк\",\n    type: \"normal\",\n    checked: false,\n  },\n  {\n    id: \"item2\",\n    group: \"Ещё одна группа\",\n    title: \"Длинное название пункта, которое занимает сразу несколько строк\",\n    type: \"danger\",\n    checked: false,\n  },\n  {\n    id: \"item3\",\n    group: \"Ещё одна группа\",\n    title:\n      \"Еще более длинное название пункта, которое занимает сразу несколько строк\",\n    type: \"normal\",\n    checked: false,\n  },\n];\n\nconst fakeDataShort = [\n  {\n    id: \"item1\",\n    group: \"1\",\n    title: \"А\",\n    type: \"normal\",\n    checked: false,\n  },\n  {\n    id: \"item2\",\n    group: \"1\",\n    title: \"Б\",\n    type: \"normal\",\n    checked: false,\n  },\n  {\n    id: \"item3\",\n    group: \"2\",\n    title: \"В\",\n    type: \"normal\",\n    checked: false,\n  },\n  {\n    id: \"item4\",\n    group: \"2\",\n    title: \"Г\",\n    type: \"danger\",\n    checked: false,\n  },\n];\n\nconst doSomeAjaxOnChange = (updList: IItem[]) => {\n  // some Saga/Thunk/Axios/Fetch/Whatever magic here\n  return;\n};\n\nexport const App: FC = () => {\n  return (\n    <AppContainer>\n      <SimpleHeader title=\"Дропдаун \" />\n\n      <section className=\"dropdowns\">\n        <Dropdown\n          data={fakeData}\n          title=\"Дропдаун fit-content\"\n          doSomeAjaxOnChange={doSomeAjaxOnChange}\n        />\n\n        <Dropdown\n          data={fakeDataShort}\n          title=\"Дропдаун lite\"\n          doSomeAjaxOnChange={doSomeAjaxOnChange}\n        />\n\n        <Dropdown\n          data={fakeDataLong}\n          maxWidth=\"340px\"\n          title=\"Дропдаун 340\"\n          doSomeAjaxOnChange={doSomeAjaxOnChange}\n        />\n      </section>\n\n      <section className=\"dropdowns\">\n        <Dropdown\n          data={fakeData}\n          title=\"Дропдаун disabled\"\n          disabled\n          doSomeAjaxOnChange={doSomeAjaxOnChange}\n        />\n      </section>\n    </AppContainer>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./app/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}